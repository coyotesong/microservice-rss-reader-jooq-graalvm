/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables;


import com.coyotesong.microservice.rss.repo.jooq.bindings.LocalDateTimeToInstantBinding;
import com.coyotesong.microservice.rss.repo.jooq.bindings.VarcharToUrlBinding;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Keys;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Rss;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.records.FeedAuthenticationsRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.net.URL;
import java.time.Instant;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FeedAuthentications extends TableImpl<FeedAuthenticationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rss.feed_authentications</code>
     */
    public static final FeedAuthentications FEED_AUTHENTICATIONS = new FeedAuthentications();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedAuthenticationsRecord> getRecordType() {
        return FeedAuthenticationsRecord.class;
    }

    /**
     * The column <code>rss.feed_authentications.feed_id</code>.
     */
    public final TableField<FeedAuthenticationsRecord, Long> FEED_ID = createField(DSL.name("feed_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rss.feed_authentications.timestamp</code>.
     */
    public final TableField<FeedAuthenticationsRecord, Instant> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("(now())::timestamp(6) without time zone"), SQLDataType.LOCALDATETIME)), this, "", new LocalDateTimeToInstantBinding());

    /**
     * The column <code>rss.feed_authentications.authentication_url</code>.
     */
    public final TableField<FeedAuthenticationsRecord, URL> AUTHENTICATION_URL = createField(DSL.name("authentication_url"), SQLDataType.CLOB.nullable(false), this, "", new VarcharToUrlBinding());

    /**
     * The column <code>rss.feed_authentications.username</code>.
     */
    public final TableField<FeedAuthenticationsRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feed_authentications.password</code>.
     */
    public final TableField<FeedAuthenticationsRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CLOB, this, "");

    private FeedAuthentications(Name alias, Table<FeedAuthenticationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FeedAuthentications(Name alias, Table<FeedAuthenticationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rss.feed_authentications</code> table reference
     */
    public FeedAuthentications(String alias) {
        this(DSL.name(alias), FEED_AUTHENTICATIONS);
    }

    /**
     * Create an aliased <code>rss.feed_authentications</code> table reference
     */
    public FeedAuthentications(Name alias) {
        this(alias, FEED_AUTHENTICATIONS);
    }

    /**
     * Create a <code>rss.feed_authentications</code> table reference
     */
    public FeedAuthentications() {
        this(DSL.name("feed_authentications"), null);
    }

    public <O extends Record> FeedAuthentications(Table<O> child, ForeignKey<O, FeedAuthenticationsRecord> key) {
        super(child, key, FEED_AUTHENTICATIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Rss.RSS;
    }

    @Override
    public UniqueKey<FeedAuthenticationsRecord> getPrimaryKey() {
        return Keys.RSS_FEED_AUTHENTICATIONS_PKEY;
    }

    @Override
    public FeedAuthentications as(String alias) {
        return new FeedAuthentications(DSL.name(alias), this);
    }

    @Override
    public FeedAuthentications as(Name alias) {
        return new FeedAuthentications(alias, this);
    }

    @Override
    public FeedAuthentications as(Table<?> alias) {
        return new FeedAuthentications(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedAuthentications rename(String name) {
        return new FeedAuthentications(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedAuthentications rename(Name name) {
        return new FeedAuthentications(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedAuthentications rename(Table<?> name) {
        return new FeedAuthentications(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Instant, URL, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Instant, ? super URL, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Instant, ? super URL, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
