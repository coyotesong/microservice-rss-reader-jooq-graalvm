/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rome.tables;


import com.coyotesong.microservice.rss.repo.jooq.bindings.VarcharToUrlBinding;
import com.coyotesong.microservice.rss.repo.jooq.generated.rome.Keys;
import com.coyotesong.microservice.rss.repo.jooq.generated.rome.Rome;
import com.coyotesong.microservice.rss.repo.jooq.generated.rome.tables.records.OpmlBodyRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class OpmlBody extends TableImpl<OpmlBodyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rome.opml_body</code>
     */
    public static final OpmlBody OPML_BODY = new OpmlBody();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OpmlBodyRecord> getRecordType() {
        return OpmlBodyRecord.class;
    }

    /**
     * The column <code>rome.opml_body.id</code>.
     */
    public final TableField<OpmlBodyRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rome.opml_body.url</code>.
     */
    public final TableField<OpmlBodyRecord, java.net.URL> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "", new VarcharToUrlBinding());

    /**
     * The column <code>rome.opml_body.content_type</code>.
     */
    public final TableField<OpmlBodyRecord, String> CONTENT_TYPE = createField(DSL.name("content_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rome.opml_body.content_length</code>.
     */
    public final TableField<OpmlBodyRecord, Integer> CONTENT_LENGTH = createField(DSL.name("content_length"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>rome.opml_body.charset</code>.
     */
    public final TableField<OpmlBodyRecord, String> CHARSET = createField(DSL.name("charset"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rome.opml_body.etag</code>.
     */
    public final TableField<OpmlBodyRecord, String> ETAG = createField(DSL.name("etag"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rome.opml_body.body</code>.
     */
    public final TableField<OpmlBodyRecord, String> BODY = createField(DSL.name("body"), SQLDataType.CLOB, this, "");

    private OpmlBody(Name alias, Table<OpmlBodyRecord> aliased) {
        this(alias, aliased, null);
    }

    private OpmlBody(Name alias, Table<OpmlBodyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rome.opml_body</code> table reference
     */
    public OpmlBody(String alias) {
        this(DSL.name(alias), OPML_BODY);
    }

    /**
     * Create an aliased <code>rome.opml_body</code> table reference
     */
    public OpmlBody(Name alias) {
        this(alias, OPML_BODY);
    }

    /**
     * Create a <code>rome.opml_body</code> table reference
     */
    public OpmlBody() {
        this(DSL.name("opml_body"), null);
    }

    public <O extends Record> OpmlBody(Table<O> child, ForeignKey<O, OpmlBodyRecord> key) {
        super(child, key, OPML_BODY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Rome.ROME;
    }

    @Override
    public Identity<OpmlBodyRecord, Long> getIdentity() {
        return (Identity<OpmlBodyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OpmlBodyRecord> getPrimaryKey() {
        return Keys.ROME_OPML_CONTENT_PKEY;
    }

    @Override
    public OpmlBody as(String alias) {
        return new OpmlBody(DSL.name(alias), this);
    }

    @Override
    public OpmlBody as(Name alias) {
        return new OpmlBody(alias, this);
    }

    @Override
    public OpmlBody as(Table<?> alias) {
        return new OpmlBody(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OpmlBody rename(String name) {
        return new OpmlBody(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OpmlBody rename(Name name) {
        return new OpmlBody(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OpmlBody rename(Table<?> name) {
        return new OpmlBody(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, java.net.URL, String, Integer, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super java.net.URL, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super java.net.URL, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
