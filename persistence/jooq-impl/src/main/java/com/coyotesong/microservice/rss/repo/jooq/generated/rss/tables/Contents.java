/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables;


import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Keys;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Rss;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.records.ContentsRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Contents extends TableImpl<ContentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rss.contents</code>
     */
    public static final Contents CONTENTS = new Contents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContentsRecord> getRecordType() {
        return ContentsRecord.class;
    }

    /**
     * The column <code>rss.contents.id</code>.
     */
    public final TableField<ContentsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rss.contents.position</code>.
     */
    public final TableField<ContentsRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rss.contents.mode</code>.
     */
    public final TableField<ContentsRecord, String> MODE = createField(DSL.name("mode"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.contents.type</code>.
     */
    public final TableField<ContentsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.contents.content_type</code>.
     */
    public final TableField<ContentsRecord, String> CONTENT_TYPE = createField(DSL.name("content_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.contents.content_length</code>.
     */
    public final TableField<ContentsRecord, Integer> CONTENT_LENGTH = createField(DSL.name("content_length"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>rss.contents.charset</code>.
     */
    public final TableField<ContentsRecord, String> CHARSET = createField(DSL.name("charset"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.contents.value</code>.
     */
    public final TableField<ContentsRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    private Contents(Name alias, Table<ContentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contents(Name alias, Table<ContentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rss.contents</code> table reference
     */
    public Contents(String alias) {
        this(DSL.name(alias), CONTENTS);
    }

    /**
     * Create an aliased <code>rss.contents</code> table reference
     */
    public Contents(Name alias) {
        this(alias, CONTENTS);
    }

    /**
     * Create a <code>rss.contents</code> table reference
     */
    public Contents() {
        this(DSL.name("contents"), null);
    }

    public <O extends Record> Contents(Table<O> child, ForeignKey<O, ContentsRecord> key) {
        super(child, key, CONTENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Rss.RSS;
    }

    @Override
    public UniqueKey<ContentsRecord> getPrimaryKey() {
        return Keys.RSS_CONTENTS_PKEY;
    }

    @Override
    public List<ForeignKey<ContentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONTENTS__CONTENTS_ENTRIES_FKEY);
    }

    private transient Entries _entries;

    /**
     * Get the implicit join path to the <code>rss.entries</code> table.
     */
    public Entries entries() {
        if (_entries == null)
            _entries = new Entries(this, Keys.CONTENTS__CONTENTS_ENTRIES_FKEY);

        return _entries;
    }

    @Override
    public Contents as(String alias) {
        return new Contents(DSL.name(alias), this);
    }

    @Override
    public Contents as(Name alias) {
        return new Contents(alias, this);
    }

    @Override
    public Contents as(Table<?> alias) {
        return new Contents(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Contents rename(String name) {
        return new Contents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contents rename(Name name) {
        return new Contents(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contents rename(Table<?> name) {
        return new Contents(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Integer, String, String, String, Integer, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super Integer, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super Integer, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
