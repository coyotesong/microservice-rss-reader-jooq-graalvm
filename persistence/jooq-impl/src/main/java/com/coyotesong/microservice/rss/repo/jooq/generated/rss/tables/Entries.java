/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables;


import com.coyotesong.microservice.rss.repo.jooq.bindings.LocalDateTimeToInstantBinding;
import com.coyotesong.microservice.rss.repo.jooq.bindings.VarcharToUrlBinding;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Keys;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Rss;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.records.EntriesRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.Instant;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Entries extends TableImpl<EntriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rss.entries</code>
     */
    public static final Entries ENTRIES = new Entries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntriesRecord> getRecordType() {
        return EntriesRecord.class;
    }

    /**
     * The column <code>rss.entries.timestamp</code>.
     */
    public final TableField<EntriesRecord, Instant> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("(now())::timestamp(6) without time zone"), SQLDataType.LOCALDATETIME)), this, "", new LocalDateTimeToInstantBinding());

    /**
     * The column <code>rss.entries.id</code>.
     */
    public final TableField<EntriesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rss.entries.title</code>.
     */
    public final TableField<EntriesRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>rss.entries.author</code>.
     */
    public final TableField<EntriesRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.entries.url</code>.
     */
    public final TableField<EntriesRecord, java.net.URL> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "", new VarcharToUrlBinding());

    /**
     * The column <code>rss.entries.author_count</code>.
     */
    public final TableField<EntriesRecord, Integer> AUTHOR_COUNT = createField(DSL.name("author_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>rss.entries.published_date</code>.
     */
    public final TableField<EntriesRecord, Instant> PUBLISHED_DATE = createField(DSL.name("published_date"), SQLDataType.LOCALDATETIME(0), this, "", new LocalDateTimeToInstantBinding());

    /**
     * The column <code>rss.entries.updated_date</code>.
     */
    public final TableField<EntriesRecord, Instant> UPDATED_DATE = createField(DSL.name("updated_date"), SQLDataType.LOCALDATETIME(0), this, "", new LocalDateTimeToInstantBinding());

    /**
     * The column <code>rss.entries.link_count</code>.
     */
    public final TableField<EntriesRecord, Integer> LINK_COUNT = createField(DSL.name("link_count"), SQLDataType.INTEGER, this, "");

    private Entries(Name alias, Table<EntriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Entries(Name alias, Table<EntriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rss.entries</code> table reference
     */
    public Entries(String alias) {
        this(DSL.name(alias), ENTRIES);
    }

    /**
     * Create an aliased <code>rss.entries</code> table reference
     */
    public Entries(Name alias) {
        this(alias, ENTRIES);
    }

    /**
     * Create a <code>rss.entries</code> table reference
     */
    public Entries() {
        this(DSL.name("entries"), null);
    }

    public <O extends Record> Entries(Table<O> child, ForeignKey<O, EntriesRecord> key) {
        super(child, key, ENTRIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Rss.RSS;
    }

    @Override
    public Identity<EntriesRecord, Long> getIdentity() {
        return (Identity<EntriesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EntriesRecord> getPrimaryKey() {
        return Keys.RSS_ENTRIES_PKEY;
    }

    @Override
    public Entries as(String alias) {
        return new Entries(DSL.name(alias), this);
    }

    @Override
    public Entries as(Name alias) {
        return new Entries(alias, this);
    }

    @Override
    public Entries as(Table<?> alias) {
        return new Entries(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Entries rename(String name) {
        return new Entries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Entries rename(Name name) {
        return new Entries(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Entries rename(Table<?> name) {
        return new Entries(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Instant, Long, String, String, java.net.URL, Integer, Instant, Instant, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Instant, ? super Long, ? super String, ? super String, ? super java.net.URL, ? super Integer, ? super Instant, ? super Instant, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Instant, ? super Long, ? super String, ? super String, ? super java.net.URL, ? super Integer, ? super Instant, ? super Instant, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
