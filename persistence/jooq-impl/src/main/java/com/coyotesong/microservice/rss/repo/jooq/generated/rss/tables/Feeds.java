/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables;


import com.coyotesong.microservice.rss.repo.jooq.bindings.LocalDateTimeToInstantBinding;
import com.coyotesong.microservice.rss.repo.jooq.bindings.VarcharToUrlBinding;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Keys;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Rss;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.records.FeedsRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.Instant;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Feeds extends TableImpl<FeedsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rss.feeds</code>
     */
    public static final Feeds FEEDS = new Feeds();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedsRecord> getRecordType() {
        return FeedsRecord.class;
    }

    /**
     * The column <code>rss.feeds.id</code>.
     */
    public final TableField<FeedsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rss.feeds.timestamp</code>.
     */
    public final TableField<FeedsRecord, Instant> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("(now())::timestamp(6) without time zone"), SQLDataType.LOCALDATETIME)), this, "", new LocalDateTimeToInstantBinding());

    /**
     * The column <code>rss.feeds.url</code>.
     */
    public final TableField<FeedsRecord, java.net.URL> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "", new VarcharToUrlBinding());

    /**
     * The column <code>rss.feeds.original_url</code>.
     */
    public final TableField<FeedsRecord, java.net.URL> ORIGINAL_URL = createField(DSL.name("original_url"), SQLDataType.CLOB, this, "", new VarcharToUrlBinding());

    /**
     * The column <code>rss.feeds.is_valid</code>.
     */
    public final TableField<FeedsRecord, Boolean> IS_VALID = createField(DSL.name("is_valid"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>rss.feeds.is_live</code>.
     */
    public final TableField<FeedsRecord, Boolean> IS_LIVE = createField(DSL.name("is_live"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>rss.feeds.title</code>.
     */
    public final TableField<FeedsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feeds.xml_protocol</code>.
     */
    public final TableField<FeedsRecord, String> XML_PROTOCOL = createField(DSL.name("xml_protocol"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feeds.xml_link</code>.
     */
    public final TableField<FeedsRecord, String> XML_LINK = createField(DSL.name("xml_link"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feeds.feed_type</code>.
     */
    public final TableField<FeedsRecord, String> FEED_TYPE = createField(DSL.name("feed_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>rss.feeds.copyright</code>.
     */
    public final TableField<FeedsRecord, String> COPYRIGHT = createField(DSL.name("copyright"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feeds.encoding</code>.
     */
    public final TableField<FeedsRecord, String> ENCODING = createField(DSL.name("encoding"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feeds.language</code>.
     */
    public final TableField<FeedsRecord, String> LANGUAGE = createField(DSL.name("language"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feeds.managing_editor</code>.
     */
    public final TableField<FeedsRecord, String> MANAGING_EDITOR = createField(DSL.name("managing_editor"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feeds.web_master</code>.
     */
    public final TableField<FeedsRecord, String> WEB_MASTER = createField(DSL.name("web_master"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feeds.author</code>.
     */
    public final TableField<FeedsRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feeds.requires_authenticat</code>.
     */
    public final TableField<FeedsRecord, Boolean> REQUIRES_AUTHENTICAT = createField(DSL.name("requires_authenticat"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>rss.feeds.error</code>.
     */
    public final TableField<FeedsRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feeds.published_date</code>.
     */
    public final TableField<FeedsRecord, Instant> PUBLISHED_DATE = createField(DSL.name("published_date"), SQLDataType.LOCALDATETIME(0), this, "", new LocalDateTimeToInstantBinding());

    /**
     * The column <code>rss.feeds.author_count</code>.
     */
    public final TableField<FeedsRecord, Integer> AUTHOR_COUNT = createField(DSL.name("author_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>rss.feeds.link_count</code>.
     */
    public final TableField<FeedsRecord, Integer> LINK_COUNT = createField(DSL.name("link_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>rss.feeds.html_url</code>.
     */
    public final TableField<FeedsRecord, java.net.URL> HTML_URL = createField(DSL.name("html_url"), SQLDataType.CLOB, this, "", new VarcharToUrlBinding());

    private Feeds(Name alias, Table<FeedsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Feeds(Name alias, Table<FeedsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rss.feeds</code> table reference
     */
    public Feeds(String alias) {
        this(DSL.name(alias), FEEDS);
    }

    /**
     * Create an aliased <code>rss.feeds</code> table reference
     */
    public Feeds(Name alias) {
        this(alias, FEEDS);
    }

    /**
     * Create a <code>rss.feeds</code> table reference
     */
    public Feeds() {
        this(DSL.name("feeds"), null);
    }

    public <O extends Record> Feeds(Table<O> child, ForeignKey<O, FeedsRecord> key) {
        super(child, key, FEEDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Rss.RSS;
    }

    @Override
    public Identity<FeedsRecord, Long> getIdentity() {
        return (Identity<FeedsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FeedsRecord> getPrimaryKey() {
        return Keys.RSS_FEEDS_PKEY;
    }

    @Override
    public Feeds as(String alias) {
        return new Feeds(DSL.name(alias), this);
    }

    @Override
    public Feeds as(Name alias) {
        return new Feeds(alias, this);
    }

    @Override
    public Feeds as(Table<?> alias) {
        return new Feeds(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Feeds rename(String name) {
        return new Feeds(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Feeds rename(Name name) {
        return new Feeds(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Feeds rename(Table<?> name) {
        return new Feeds(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<Long, Instant, java.net.URL, java.net.URL, Boolean, Boolean, String, String, String, String, String, String, String, String, String, String, Boolean, String, Instant, Integer, Integer, java.net.URL> fieldsRow() {
        return (Row22) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function22<? super Long, ? super Instant, ? super java.net.URL, ? super java.net.URL, ? super Boolean, ? super Boolean, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super Instant, ? super Integer, ? super Integer, ? super java.net.URL, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function22<? super Long, ? super Instant, ? super java.net.URL, ? super java.net.URL, ? super Boolean, ? super Boolean, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super Instant, ? super Integer, ? super Integer, ? super java.net.URL, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
