/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables;


import com.coyotesong.microservice.rss.repo.jooq.bindings.LocalDateTimeToInstantBinding;
import com.coyotesong.microservice.rss.repo.jooq.bindings.VarcharToUrlBinding;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Keys;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Rss;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.records.FeedResponseRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.Instant;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FeedResponse extends TableImpl<FeedResponseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rss.feed_response</code>
     */
    public static final FeedResponse FEED_RESPONSE = new FeedResponse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedResponseRecord> getRecordType() {
        return FeedResponseRecord.class;
    }

    /**
     * The column <code>rss.feed_response.id</code>.
     */
    public final TableField<FeedResponseRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rss.feed_response.timestamp</code>.
     */
    public final TableField<FeedResponseRecord, Instant> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("(now())::timestamp(6) without time zone"), SQLDataType.LOCALDATETIME)), this, "", new LocalDateTimeToInstantBinding());

    /**
     * The column <code>rss.feed_response.url</code>.
     */
    public final TableField<FeedResponseRecord, java.net.URL> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "", new VarcharToUrlBinding());

    /**
     * The column <code>rss.feed_response.status_code</code>.
     */
    public final TableField<FeedResponseRecord, Integer> STATUS_CODE = createField(DSL.name("status_code"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>rss.feed_response.requires_authentication</code>.
     */
    public final TableField<FeedResponseRecord, Boolean> REQUIRES_AUTHENTICATION = createField(DSL.name("requires_authentication"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>rss.feed_response.content_type</code>.
     */
    public final TableField<FeedResponseRecord, String> CONTENT_TYPE = createField(DSL.name("content_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feed_response.charset</code>.
     */
    public final TableField<FeedResponseRecord, String> CHARSET = createField(DSL.name("charset"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feed_response.etag</code>.
     */
    public final TableField<FeedResponseRecord, String> ETAG = createField(DSL.name("etag"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feed_response.expires</code>.
     */
    public final TableField<FeedResponseRecord, Instant> EXPIRES = createField(DSL.name("expires"), SQLDataType.LOCALDATETIME(0), this, "", new LocalDateTimeToInstantBinding());

    /**
     * The column <code>rss.feed_response.last_modified</code>.
     */
    public final TableField<FeedResponseRecord, Instant> LAST_MODIFIED = createField(DSL.name("last_modified"), SQLDataType.LOCALDATETIME(0), this, "", new LocalDateTimeToInstantBinding());

    /**
     * The column <code>rss.feed_response.cache_control</code>.
     */
    public final TableField<FeedResponseRecord, String> CACHE_CONTROL = createField(DSL.name("cache_control"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feed_response.pragma</code>.
     */
    public final TableField<FeedResponseRecord, String> PRAGMA = createField(DSL.name("pragma"), SQLDataType.CLOB, this, "");

    private FeedResponse(Name alias, Table<FeedResponseRecord> aliased) {
        this(alias, aliased, null);
    }

    private FeedResponse(Name alias, Table<FeedResponseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rss.feed_response</code> table reference
     */
    public FeedResponse(String alias) {
        this(DSL.name(alias), FEED_RESPONSE);
    }

    /**
     * Create an aliased <code>rss.feed_response</code> table reference
     */
    public FeedResponse(Name alias) {
        this(alias, FEED_RESPONSE);
    }

    /**
     * Create a <code>rss.feed_response</code> table reference
     */
    public FeedResponse() {
        this(DSL.name("feed_response"), null);
    }

    public <O extends Record> FeedResponse(Table<O> child, ForeignKey<O, FeedResponseRecord> key) {
        super(child, key, FEED_RESPONSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Rss.RSS;
    }

    @Override
    public UniqueKey<FeedResponseRecord> getPrimaryKey() {
        return Keys.RSS_FEED_RESPONSE_PKEY;
    }

    @Override
    public FeedResponse as(String alias) {
        return new FeedResponse(DSL.name(alias), this);
    }

    @Override
    public FeedResponse as(Name alias) {
        return new FeedResponse(alias, this);
    }

    @Override
    public FeedResponse as(Table<?> alias) {
        return new FeedResponse(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedResponse rename(String name) {
        return new FeedResponse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedResponse rename(Name name) {
        return new FeedResponse(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedResponse rename(Table<?> name) {
        return new FeedResponse(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Instant, java.net.URL, Integer, Boolean, String, String, String, Instant, Instant, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super Instant, ? super java.net.URL, ? super Integer, ? super Boolean, ? super String, ? super String, ? super String, ? super Instant, ? super Instant, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super Instant, ? super java.net.URL, ? super Integer, ? super Boolean, ? super String, ? super String, ? super String, ? super Instant, ? super Instant, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
