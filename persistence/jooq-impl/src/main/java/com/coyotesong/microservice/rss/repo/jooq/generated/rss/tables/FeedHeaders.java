/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables;


import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Keys;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Rss;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.records.FeedHeadersRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FeedHeaders extends TableImpl<FeedHeadersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rss.feed_headers</code>
     */
    public static final FeedHeaders FEED_HEADERS = new FeedHeaders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedHeadersRecord> getRecordType() {
        return FeedHeadersRecord.class;
    }

    /**
     * The column <code>rss.feed_headers.id</code>.
     */
    public final TableField<FeedHeadersRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rss.feed_headers.name</code>.
     */
    public final TableField<FeedHeadersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>rss.feed_headers.position</code>.
     */
    public final TableField<FeedHeadersRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rss.feed_headers.value</code>.
     */
    public final TableField<FeedHeadersRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    private FeedHeaders(Name alias, Table<FeedHeadersRecord> aliased) {
        this(alias, aliased, null);
    }

    private FeedHeaders(Name alias, Table<FeedHeadersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rss.feed_headers</code> table reference
     */
    public FeedHeaders(String alias) {
        this(DSL.name(alias), FEED_HEADERS);
    }

    /**
     * Create an aliased <code>rss.feed_headers</code> table reference
     */
    public FeedHeaders(Name alias) {
        this(alias, FEED_HEADERS);
    }

    /**
     * Create a <code>rss.feed_headers</code> table reference
     */
    public FeedHeaders() {
        this(DSL.name("feed_headers"), null);
    }

    public <O extends Record> FeedHeaders(Table<O> child, ForeignKey<O, FeedHeadersRecord> key) {
        super(child, key, FEED_HEADERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Rss.RSS;
    }

    @Override
    public UniqueKey<FeedHeadersRecord> getPrimaryKey() {
        return Keys.RSS_FEED_HEADERS_PKEY;
    }

    @Override
    public FeedHeaders as(String alias) {
        return new FeedHeaders(DSL.name(alias), this);
    }

    @Override
    public FeedHeaders as(Name alias) {
        return new FeedHeaders(alias, this);
    }

    @Override
    public FeedHeaders as(Table<?> alias) {
        return new FeedHeaders(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedHeaders rename(String name) {
        return new FeedHeaders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedHeaders rename(Name name) {
        return new FeedHeaders(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedHeaders rename(Table<?> name) {
        return new FeedHeaders(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
