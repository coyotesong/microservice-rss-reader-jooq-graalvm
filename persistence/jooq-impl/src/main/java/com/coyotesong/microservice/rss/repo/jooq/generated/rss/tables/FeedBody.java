/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables;


import com.coyotesong.microservice.rss.repo.jooq.bindings.VarcharToUrlBinding;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Keys;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Rss;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.records.FeedBodyRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FeedBody extends TableImpl<FeedBodyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rss.feed_body</code>
     */
    public static final FeedBody FEED_BODY = new FeedBody();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedBodyRecord> getRecordType() {
        return FeedBodyRecord.class;
    }

    /**
     * The column <code>rss.feed_body.id</code>.
     */
    public final TableField<FeedBodyRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rss.feed_body.url</code>.
     */
    public final TableField<FeedBodyRecord, java.net.URL> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "", new VarcharToUrlBinding());

    /**
     * The column <code>rss.feed_body.content_type</code>.
     */
    public final TableField<FeedBodyRecord, String> CONTENT_TYPE = createField(DSL.name("content_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feed_body.content_length</code>.
     */
    public final TableField<FeedBodyRecord, Integer> CONTENT_LENGTH = createField(DSL.name("content_length"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>rss.feed_body.charset</code>.
     */
    public final TableField<FeedBodyRecord, String> CHARSET = createField(DSL.name("charset"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feed_body.etag</code>.
     */
    public final TableField<FeedBodyRecord, String> ETAG = createField(DSL.name("etag"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.feed_body.body</code>.
     */
    public final TableField<FeedBodyRecord, String> BODY = createField(DSL.name("body"), SQLDataType.CLOB, this, "");

    private FeedBody(Name alias, Table<FeedBodyRecord> aliased) {
        this(alias, aliased, null);
    }

    private FeedBody(Name alias, Table<FeedBodyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rss.feed_body</code> table reference
     */
    public FeedBody(String alias) {
        this(DSL.name(alias), FEED_BODY);
    }

    /**
     * Create an aliased <code>rss.feed_body</code> table reference
     */
    public FeedBody(Name alias) {
        this(alias, FEED_BODY);
    }

    /**
     * Create a <code>rss.feed_body</code> table reference
     */
    public FeedBody() {
        this(DSL.name("feed_body"), null);
    }

    public <O extends Record> FeedBody(Table<O> child, ForeignKey<O, FeedBodyRecord> key) {
        super(child, key, FEED_BODY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Rss.RSS;
    }

    @Override
    public Identity<FeedBodyRecord, Long> getIdentity() {
        return (Identity<FeedBodyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FeedBodyRecord> getPrimaryKey() {
        return Keys.RSS_FEED_CONTENT_PKEY;
    }

    @Override
    public FeedBody as(String alias) {
        return new FeedBody(DSL.name(alias), this);
    }

    @Override
    public FeedBody as(Name alias) {
        return new FeedBody(alias, this);
    }

    @Override
    public FeedBody as(Table<?> alias) {
        return new FeedBody(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedBody rename(String name) {
        return new FeedBody(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedBody rename(Name name) {
        return new FeedBody(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedBody rename(Table<?> name) {
        return new FeedBody(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, java.net.URL, String, Integer, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super java.net.URL, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super java.net.URL, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
