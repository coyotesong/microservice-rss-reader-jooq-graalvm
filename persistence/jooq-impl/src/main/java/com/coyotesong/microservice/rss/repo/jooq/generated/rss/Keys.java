/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rss;


import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.*;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.records.*;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in rss.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CategoriesRecord> RSS_CATEGORIES_PKEY = Internal.createUniqueKey(Categories.CATEGORIES, DSL.name("rss_categories_pkey"), new TableField[]{Categories.CATEGORIES.ID}, true);
    public static final UniqueKey<ContentsRecord> RSS_CONTENTS_PKEY = Internal.createUniqueKey(Contents.CONTENTS, DSL.name("rss_contents_pkey"), new TableField[]{Contents.CONTENTS.ID, Contents.CONTENTS.POSITION}, true);
    public static final UniqueKey<EnclosuresRecord> RSS_ENCLOSURES_PKEY = Internal.createUniqueKey(Enclosures.ENCLOSURES, DSL.name("rss_enclosures_pkey"), new TableField[]{Enclosures.ENCLOSURES.ID}, true);
    public static final UniqueKey<EntriesRecord> RSS_ENTRIES_PKEY = Internal.createUniqueKey(Entries.ENTRIES, DSL.name("rss_entries_pkey"), new TableField[]{Entries.ENTRIES.ID}, true);
    public static final UniqueKey<FeedAuthenticationsRecord> RSS_FEED_AUTHENTICATIONS_PKEY = Internal.createUniqueKey(FeedAuthentications.FEED_AUTHENTICATIONS, DSL.name("rss_feed_authentications_pkey"), new TableField[]{FeedAuthentications.FEED_AUTHENTICATIONS.FEED_ID}, true);
    public static final UniqueKey<FeedBodyRecord> RSS_FEED_CONTENT_PKEY = Internal.createUniqueKey(FeedBody.FEED_BODY, DSL.name("rss_feed_content_pkey"), new TableField[]{FeedBody.FEED_BODY.ID}, true);
    public static final UniqueKey<FeedHeadersRecord> RSS_FEED_HEADERS_PKEY = Internal.createUniqueKey(FeedHeaders.FEED_HEADERS, DSL.name("rss_feed_headers_pkey"), new TableField[]{FeedHeaders.FEED_HEADERS.ID, FeedHeaders.FEED_HEADERS.NAME, FeedHeaders.FEED_HEADERS.POSITION}, true);
    public static final UniqueKey<FeedResponseRecord> RSS_FEED_RESPONSE_PKEY = Internal.createUniqueKey(FeedResponse.FEED_RESPONSE, DSL.name("rss_feed_response_pkey"), new TableField[]{FeedResponse.FEED_RESPONSE.ID}, true);
    public static final UniqueKey<FeedsRecord> RSS_FEEDS_PKEY = Internal.createUniqueKey(Feeds.FEEDS, DSL.name("rss_feeds_pkey"), new TableField[]{Feeds.FEEDS.ID}, true);
    public static final UniqueKey<FeedsEntriesRecord> RSS_FEEDS_ENTRIES_PKEY = Internal.createUniqueKey(FeedsEntries.FEEDS_ENTRIES, DSL.name("rss_feeds_entries_pkey"), new TableField[]{FeedsEntries.FEEDS_ENTRIES.FEED_ID, FeedsEntries.FEEDS_ENTRIES.ENTRY_ID}, true);
    public static final UniqueKey<ImagesRecord> RSS_IMAGES_PKEY = Internal.createUniqueKey(Images.IMAGES, DSL.name("rss_images_pkey"), new TableField[]{Images.IMAGES.ID}, true);
    public static final UniqueKey<LinksRecord> RSS_LINKS_PKEY = Internal.createUniqueKey(Links.LINKS, DSL.name("rss_links_pkey"), new TableField[]{Links.LINKS.ID}, true);
    public static final UniqueKey<PersonsRecord> RSS_PERSONS_PKEY = Internal.createUniqueKey(Persons.PERSONS, DSL.name("rss_persons_pkey"), new TableField[]{Persons.PERSONS.ID}, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ContentsRecord, EntriesRecord> CONTENTS__CONTENTS_ENTRIES_FKEY = Internal.createForeignKey(Contents.CONTENTS, DSL.name("contents_entries_fkey"), new TableField[]{Contents.CONTENTS.ID}, Keys.RSS_ENTRIES_PKEY, new TableField[]{Entries.ENTRIES.ID}, true);
    public static final ForeignKey<FeedsEntriesRecord, EntriesRecord> FEEDS_ENTRIES__FEEDS_ENTRIES_ENTRIES_FKEY = Internal.createForeignKey(FeedsEntries.FEEDS_ENTRIES, DSL.name("feeds_entries_entries_fkey"), new TableField[]{FeedsEntries.FEEDS_ENTRIES.ENTRY_ID}, Keys.RSS_ENTRIES_PKEY, new TableField[]{Entries.ENTRIES.ID}, true);
    public static final ForeignKey<FeedsEntriesRecord, FeedsRecord> FEEDS_ENTRIES__FEEDS_ENTRIES_FEEDS_FKEY = Internal.createForeignKey(FeedsEntries.FEEDS_ENTRIES, DSL.name("feeds_entries_feeds_fkey"), new TableField[]{FeedsEntries.FEEDS_ENTRIES.FEED_ID}, Keys.RSS_FEEDS_PKEY, new TableField[]{Feeds.FEEDS.ID}, true);
}
