/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables;


import com.coyotesong.microservice.rss.repo.jooq.bindings.VarcharToUrlBinding;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Keys;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Rss;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.records.FeedsEntriesRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FeedsEntries extends TableImpl<FeedsEntriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rss.feeds_entries</code>
     */
    public static final FeedsEntries FEEDS_ENTRIES = new FeedsEntries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedsEntriesRecord> getRecordType() {
        return FeedsEntriesRecord.class;
    }

    /**
     * The column <code>rss.feeds_entries.feed_id</code>.
     */
    public final TableField<FeedsEntriesRecord, Long> FEED_ID = createField(DSL.name("feed_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rss.feeds_entries.entry_id</code>.
     */
    public final TableField<FeedsEntriesRecord, Long> ENTRY_ID = createField(DSL.name("entry_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rss.feeds_entries.url</code>.
     */
    public final TableField<FeedsEntriesRecord, java.net.URL> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "", new VarcharToUrlBinding());

    private FeedsEntries(Name alias, Table<FeedsEntriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private FeedsEntries(Name alias, Table<FeedsEntriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rss.feeds_entries</code> table reference
     */
    public FeedsEntries(String alias) {
        this(DSL.name(alias), FEEDS_ENTRIES);
    }

    /**
     * Create an aliased <code>rss.feeds_entries</code> table reference
     */
    public FeedsEntries(Name alias) {
        this(alias, FEEDS_ENTRIES);
    }

    /**
     * Create a <code>rss.feeds_entries</code> table reference
     */
    public FeedsEntries() {
        this(DSL.name("feeds_entries"), null);
    }

    public <O extends Record> FeedsEntries(Table<O> child, ForeignKey<O, FeedsEntriesRecord> key) {
        super(child, key, FEEDS_ENTRIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Rss.RSS;
    }

    @Override
    public UniqueKey<FeedsEntriesRecord> getPrimaryKey() {
        return Keys.RSS_FEEDS_ENTRIES_PKEY;
    }

    @Override
    public List<ForeignKey<FeedsEntriesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FEEDS_ENTRIES__FEEDS_ENTRIES_FEEDS_FKEY, Keys.FEEDS_ENTRIES__FEEDS_ENTRIES_ENTRIES_FKEY);
    }

    private transient Feeds _feeds;
    private transient Entries _entries;

    /**
     * Get the implicit join path to the <code>rss.feeds</code> table.
     */
    public Feeds feeds() {
        if (_feeds == null)
            _feeds = new Feeds(this, Keys.FEEDS_ENTRIES__FEEDS_ENTRIES_FEEDS_FKEY);

        return _feeds;
    }

    /**
     * Get the implicit join path to the <code>rss.entries</code> table.
     */
    public Entries entries() {
        if (_entries == null)
            _entries = new Entries(this, Keys.FEEDS_ENTRIES__FEEDS_ENTRIES_ENTRIES_FKEY);

        return _entries;
    }

    @Override
    public FeedsEntries as(String alias) {
        return new FeedsEntries(DSL.name(alias), this);
    }

    @Override
    public FeedsEntries as(Name alias) {
        return new FeedsEntries(alias, this);
    }

    @Override
    public FeedsEntries as(Table<?> alias) {
        return new FeedsEntries(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedsEntries rename(String name) {
        return new FeedsEntries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedsEntries rename(Name name) {
        return new FeedsEntries(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedsEntries rename(Table<?> name) {
        return new FeedsEntries(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, java.net.URL> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super java.net.URL, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super java.net.URL, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
