/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.records;


import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.Categories;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class CategoriesRecord extends UpdatableRecordImpl<CategoriesRecord> implements Record4<Long, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>rss.categories.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>rss.categories.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>rss.categories.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>rss.categories.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>rss.categories.label</code>.
     */
    public void setLabel(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>rss.categories.label</code>.
     */
    public String getLabel() {
        return (String) get(2);
    }

    /**
     * Setter for <code>rss.categories.taxonomy_uri</code>.
     */
    public void setTaxonomyUri(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>rss.categories.taxonomy_uri</code>.
     */
    public String getTaxonomyUri() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Categories.CATEGORIES.ID;
    }

    @Override
    public Field<String> field2() {
        return Categories.CATEGORIES.NAME;
    }

    @Override
    public Field<String> field3() {
        return Categories.CATEGORIES.LABEL;
    }

    @Override
    public Field<String> field4() {
        return Categories.CATEGORIES.TAXONOMY_URI;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getLabel();
    }

    @Override
    public String component4() {
        return getTaxonomyUri();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getLabel();
    }

    @Override
    public String value4() {
        return getTaxonomyUri();
    }

    @Override
    public CategoriesRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CategoriesRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public CategoriesRecord value3(String value) {
        setLabel(value);
        return this;
    }

    @Override
    public CategoriesRecord value4(String value) {
        setTaxonomyUri(value);
        return this;
    }

    @Override
    public CategoriesRecord values(Long value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CategoriesRecord
     */
    public CategoriesRecord() {
        super(Categories.CATEGORIES);
    }

    /**
     * Create a detached, initialised CategoriesRecord
     */
    public CategoriesRecord(Long id, String name, String label, String taxonomyUri) {
        super(Categories.CATEGORIES);

        setId(id);
        setName(name);
        setLabel(label);
        setTaxonomyUri(taxonomyUri);
        resetChangedOnNotNull();
    }
}
