/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rome.tables;


import com.coyotesong.microservice.rss.repo.jooq.bindings.LocalDateTimeToInstantBinding;
import com.coyotesong.microservice.rss.repo.jooq.bindings.VarcharToUrlBinding;
import com.coyotesong.microservice.rss.repo.jooq.generated.rome.Keys;
import com.coyotesong.microservice.rss.repo.jooq.generated.rome.Rome;
import com.coyotesong.microservice.rss.repo.jooq.generated.rome.tables.records.OutlinesRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.net.URL;
import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Outlines extends TableImpl<OutlinesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rome.outlines</code>
     */
    public static final Outlines OUTLINES = new Outlines();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OutlinesRecord> getRecordType() {
        return OutlinesRecord.class;
    }

    /**
     * The column <code>rome.outlines.id</code>.
     */
    public final TableField<OutlinesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rome.outlines.position</code>.
     */
    public final TableField<OutlinesRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rome.outlines.timestamp</code>.
     */
    public final TableField<OutlinesRecord, Instant> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("(now())::timestamp(6) without time zone"), SQLDataType.LOCALDATETIME)), this, "", new LocalDateTimeToInstantBinding());

    /**
     * The column <code>rome.outlines.created_date</code>.
     */
    public final TableField<OutlinesRecord, Instant> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(0), this, "", new LocalDateTimeToInstantBinding());

    /**
     * The column <code>rome.outlines.encoding</code>.
     */
    public final TableField<OutlinesRecord, String> ENCODING = createField(DSL.name("encoding"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rome.outlines.is_breakpoint</code>.
     */
    public final TableField<OutlinesRecord, Boolean> IS_BREAKPOINT = createField(DSL.name("is_breakpoint"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>rome.outlines.is_comment</code>.
     */
    public final TableField<OutlinesRecord, Boolean> IS_COMMENT = createField(DSL.name("is_comment"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>rome.outlines.html_url</code>.
     */
    public final TableField<OutlinesRecord, URL> HTML_URL = createField(DSL.name("html_url"), SQLDataType.CLOB, this, "", new VarcharToUrlBinding());

    /**
     * The column <code>rome.outlines.text</code>.
     */
    public final TableField<OutlinesRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rome.outlines.title</code>.
     */
    public final TableField<OutlinesRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rome.outlines.type</code>.
     */
    public final TableField<OutlinesRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rome.outlines.xml_url</code>.
     */
    public final TableField<OutlinesRecord, URL> XML_URL = createField(DSL.name("xml_url"), SQLDataType.CLOB, this, "", new VarcharToUrlBinding());

    private Outlines(Name alias, Table<OutlinesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Outlines(Name alias, Table<OutlinesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rome.outlines</code> table reference
     */
    public Outlines(String alias) {
        this(DSL.name(alias), OUTLINES);
    }

    /**
     * Create an aliased <code>rome.outlines</code> table reference
     */
    public Outlines(Name alias) {
        this(alias, OUTLINES);
    }

    /**
     * Create a <code>rome.outlines</code> table reference
     */
    public Outlines() {
        this(DSL.name("outlines"), null);
    }

    public <O extends Record> Outlines(Table<O> child, ForeignKey<O, OutlinesRecord> key) {
        super(child, key, OUTLINES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Rome.ROME;
    }

    @Override
    public UniqueKey<OutlinesRecord> getPrimaryKey() {
        return Keys.ROME_OUTLINES_PKEY;
    }

    @Override
    public List<ForeignKey<OutlinesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OUTLINES__OUTLINES_OPML_FKEY);
    }

    private transient Opml _opml;

    /**
     * Get the implicit join path to the <code>rome.opml</code> table.
     */
    public Opml opml() {
        if (_opml == null)
            _opml = new Opml(this, Keys.OUTLINES__OUTLINES_OPML_FKEY);

        return _opml;
    }

    @Override
    public Outlines as(String alias) {
        return new Outlines(DSL.name(alias), this);
    }

    @Override
    public Outlines as(Name alias) {
        return new Outlines(alias, this);
    }

    @Override
    public Outlines as(Table<?> alias) {
        return new Outlines(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Outlines rename(String name) {
        return new Outlines(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Outlines rename(Name name) {
        return new Outlines(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Outlines rename(Table<?> name) {
        return new Outlines(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Integer, Instant, Instant, String, Boolean, Boolean, URL, String, String, String, URL> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super Integer, ? super Instant, ? super Instant, ? super String, ? super Boolean, ? super Boolean, ? super URL, ? super String, ? super String, ? super String, ? super URL, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super Integer, ? super Instant, ? super Instant, ? super String, ? super Boolean, ? super Boolean, ? super URL, ? super String, ? super String, ? super String, ? super URL, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
