/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rome.tables;


import com.coyotesong.microservice.rss.repo.jooq.generated.rome.Keys;
import com.coyotesong.microservice.rss.repo.jooq.generated.rome.Rome;
import com.coyotesong.microservice.rss.repo.jooq.generated.rome.tables.records.WireFeedsRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class WireFeeds extends TableImpl<WireFeedsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rome.wire_feeds</code>
     */
    public static final WireFeeds WIRE_FEEDS = new WireFeeds();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WireFeedsRecord> getRecordType() {
        return WireFeedsRecord.class;
    }

    /**
     * The column <code>rome.wire_feeds.id</code>.
     */
    public final TableField<WireFeedsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rome.wire_feeds.encoding</code>.
     */
    public final TableField<WireFeedsRecord, String> ENCODING = createField(DSL.name("encoding"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rome.wire_feeds.feed_type</code>.
     */
    public final TableField<WireFeedsRecord, String> FEED_TYPE = createField(DSL.name("feed_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rome.wire_feeds.stylesheet</code>.
     */
    public final TableField<WireFeedsRecord, String> STYLESHEET = createField(DSL.name("stylesheet"), SQLDataType.CLOB, this, "");

    private WireFeeds(Name alias, Table<WireFeedsRecord> aliased) {
        this(alias, aliased, null);
    }

    private WireFeeds(Name alias, Table<WireFeedsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rome.wire_feeds</code> table reference
     */
    public WireFeeds(String alias) {
        this(DSL.name(alias), WIRE_FEEDS);
    }

    /**
     * Create an aliased <code>rome.wire_feeds</code> table reference
     */
    public WireFeeds(Name alias) {
        this(alias, WIRE_FEEDS);
    }

    /**
     * Create a <code>rome.wire_feeds</code> table reference
     */
    public WireFeeds() {
        this(DSL.name("wire_feeds"), null);
    }

    public <O extends Record> WireFeeds(Table<O> child, ForeignKey<O, WireFeedsRecord> key) {
        super(child, key, WIRE_FEEDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Rome.ROME;
    }

    @Override
    public Identity<WireFeedsRecord, Long> getIdentity() {
        return (Identity<WireFeedsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WireFeedsRecord> getPrimaryKey() {
        return Keys.ROME_WIRE_FEEDS_PKEY;
    }

    @Override
    public WireFeeds as(String alias) {
        return new WireFeeds(DSL.name(alias), this);
    }

    @Override
    public WireFeeds as(Name alias) {
        return new WireFeeds(alias, this);
    }

    @Override
    public WireFeeds as(Table<?> alias) {
        return new WireFeeds(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WireFeeds rename(String name) {
        return new WireFeeds(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WireFeeds rename(Name name) {
        return new WireFeeds(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WireFeeds rename(Table<?> name) {
        return new WireFeeds(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
