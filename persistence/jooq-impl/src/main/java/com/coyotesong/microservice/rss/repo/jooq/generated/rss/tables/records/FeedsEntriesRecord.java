/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.records;


import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.FeedsEntries;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import java.net.URL;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FeedsEntriesRecord extends UpdatableRecordImpl<FeedsEntriesRecord> implements Record3<Long, Long, URL> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>rss.feeds_entries.feed_id</code>.
     */
    public void setFeedId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>rss.feeds_entries.feed_id</code>.
     */
    public Long getFeedId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>rss.feeds_entries.entry_id</code>.
     */
    public void setEntryId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>rss.feeds_entries.entry_id</code>.
     */
    public Long getEntryId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>rss.feeds_entries.url</code>.
     */
    public void setUrl(URL value) {
        set(2, value);
    }

    /**
     * Getter for <code>rss.feeds_entries.url</code>.
     */
    public URL getUrl() {
        return (URL) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, URL> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, URL> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return FeedsEntries.FEEDS_ENTRIES.FEED_ID;
    }

    @Override
    public Field<Long> field2() {
        return FeedsEntries.FEEDS_ENTRIES.ENTRY_ID;
    }

    @Override
    public Field<URL> field3() {
        return FeedsEntries.FEEDS_ENTRIES.URL;
    }

    @Override
    public Long component1() {
        return getFeedId();
    }

    @Override
    public Long component2() {
        return getEntryId();
    }

    @Override
    public URL component3() {
        return getUrl();
    }

    @Override
    public Long value1() {
        return getFeedId();
    }

    @Override
    public Long value2() {
        return getEntryId();
    }

    @Override
    public URL value3() {
        return getUrl();
    }

    @Override
    public FeedsEntriesRecord value1(Long value) {
        setFeedId(value);
        return this;
    }

    @Override
    public FeedsEntriesRecord value2(Long value) {
        setEntryId(value);
        return this;
    }

    @Override
    public FeedsEntriesRecord value3(URL value) {
        setUrl(value);
        return this;
    }

    @Override
    public FeedsEntriesRecord values(Long value1, Long value2, URL value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FeedsEntriesRecord
     */
    public FeedsEntriesRecord() {
        super(FeedsEntries.FEEDS_ENTRIES);
    }

    /**
     * Create a detached, initialised FeedsEntriesRecord
     */
    public FeedsEntriesRecord(Long feedId, Long entryId, URL url) {
        super(FeedsEntries.FEEDS_ENTRIES);

        setFeedId(feedId);
        setEntryId(entryId);
        setUrl(url);
        resetChangedOnNotNull();
    }
}
