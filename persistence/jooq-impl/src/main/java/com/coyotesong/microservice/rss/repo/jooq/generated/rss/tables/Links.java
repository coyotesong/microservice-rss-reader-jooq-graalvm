/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables;


import com.coyotesong.microservice.rss.repo.jooq.bindings.VarcharToUrlBinding;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Keys;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Rss;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.records.LinksRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.net.URL;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Links extends TableImpl<LinksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rss.links</code>
     */
    public static final Links LINKS = new Links();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LinksRecord> getRecordType() {
        return LinksRecord.class;
    }

    /**
     * The column <code>rss.links.id</code>.
     */
    public final TableField<LinksRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rss.links.entry_id</code>.
     */
    public final TableField<LinksRecord, Long> ENTRY_ID = createField(DSL.name("entry_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>rss.links.position</code>.
     */
    public final TableField<LinksRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>rss.links.title</code>.
     */
    public final TableField<LinksRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.links.type</code>.
     */
    public final TableField<LinksRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.links.href</code>.
     */
    public final TableField<LinksRecord, URL> HREF = createField(DSL.name("href"), SQLDataType.CLOB.nullable(false), this, "", new VarcharToUrlBinding());

    /**
     * The column <code>rss.links.href_lang</code>.
     */
    public final TableField<LinksRecord, String> HREF_LANG = createField(DSL.name("href_lang"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.links.length</code>.
     */
    public final TableField<LinksRecord, Long> LENGTH = createField(DSL.name("length"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>rss.links.rel</code>.
     */
    public final TableField<LinksRecord, String> REL = createField(DSL.name("rel"), SQLDataType.CLOB, this, "");

    private Links(Name alias, Table<LinksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Links(Name alias, Table<LinksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rss.links</code> table reference
     */
    public Links(String alias) {
        this(DSL.name(alias), LINKS);
    }

    /**
     * Create an aliased <code>rss.links</code> table reference
     */
    public Links(Name alias) {
        this(alias, LINKS);
    }

    /**
     * Create a <code>rss.links</code> table reference
     */
    public Links() {
        this(DSL.name("links"), null);
    }

    public <O extends Record> Links(Table<O> child, ForeignKey<O, LinksRecord> key) {
        super(child, key, LINKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Rss.RSS;
    }

    @Override
    public Identity<LinksRecord, Long> getIdentity() {
        return (Identity<LinksRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LinksRecord> getPrimaryKey() {
        return Keys.RSS_LINKS_PKEY;
    }

    @Override
    public Links as(String alias) {
        return new Links(DSL.name(alias), this);
    }

    @Override
    public Links as(Name alias) {
        return new Links(alias, this);
    }

    @Override
    public Links as(Table<?> alias) {
        return new Links(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Links rename(String name) {
        return new Links(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Links rename(Name name) {
        return new Links(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Links rename(Table<?> name) {
        return new Links(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Integer, String, String, URL, String, Long, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Long, ? super Integer, ? super String, ? super String, ? super URL, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Long, ? super Integer, ? super String, ? super String, ? super URL, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
