/*
 * This file is generated by jOOQ.
 */
package com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables;


import com.coyotesong.microservice.rss.repo.jooq.bindings.VarcharToUrlBinding;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Keys;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.Rss;
import com.coyotesong.microservice.rss.repo.jooq.generated.rss.tables.records.EnclosuresRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Enclosures extends TableImpl<EnclosuresRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rss.enclosures</code>
     */
    public static final Enclosures ENCLOSURES = new Enclosures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EnclosuresRecord> getRecordType() {
        return EnclosuresRecord.class;
    }

    /**
     * The column <code>rss.enclosures.id</code>.
     */
    public final TableField<EnclosuresRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>rss.enclosures.type</code>.
     */
    public final TableField<EnclosuresRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>rss.enclosures.url</code>.
     */
    public final TableField<EnclosuresRecord, java.net.URL> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "", new VarcharToUrlBinding());

    /**
     * The column <code>rss.enclosures.length</code>.
     */
    public final TableField<EnclosuresRecord, Long> LENGTH = createField(DSL.name("length"), SQLDataType.BIGINT, this, "");

    private Enclosures(Name alias, Table<EnclosuresRecord> aliased) {
        this(alias, aliased, null);
    }

    private Enclosures(Name alias, Table<EnclosuresRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rss.enclosures</code> table reference
     */
    public Enclosures(String alias) {
        this(DSL.name(alias), ENCLOSURES);
    }

    /**
     * Create an aliased <code>rss.enclosures</code> table reference
     */
    public Enclosures(Name alias) {
        this(alias, ENCLOSURES);
    }

    /**
     * Create a <code>rss.enclosures</code> table reference
     */
    public Enclosures() {
        this(DSL.name("enclosures"), null);
    }

    public <O extends Record> Enclosures(Table<O> child, ForeignKey<O, EnclosuresRecord> key) {
        super(child, key, ENCLOSURES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Rss.RSS;
    }

    @Override
    public Identity<EnclosuresRecord, Long> getIdentity() {
        return (Identity<EnclosuresRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<EnclosuresRecord> getPrimaryKey() {
        return Keys.RSS_ENCLOSURES_PKEY;
    }

    @Override
    public Enclosures as(String alias) {
        return new Enclosures(DSL.name(alias), this);
    }

    @Override
    public Enclosures as(Name alias) {
        return new Enclosures(alias, this);
    }

    @Override
    public Enclosures as(Table<?> alias) {
        return new Enclosures(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Enclosures rename(String name) {
        return new Enclosures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Enclosures rename(Name name) {
        return new Enclosures(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Enclosures rename(Table<?> name) {
        return new Enclosures(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, java.net.URL, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super java.net.URL, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super java.net.URL, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
