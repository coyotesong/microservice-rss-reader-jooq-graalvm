/*
 * Copyright (c) 2023. Bear Giles <bgiles@coyotesong.com>.
 * All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.coyotesong.microservice.rss.model.matchers;

import com.coyotesong.microservice.rss.model.Person;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.TypeSafeMatcher;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.IsNull;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import static java.time.format.DateTimeFormatter.ISO_INSTANT;

/**
 * Hamcrest Matcher for Person objects
 * <p>
 * This file was autogenerated.
 * </p><p>
 * Note: it can not (yet) handle these columns:
 * <ul>
 *   <li>ArrayList authorOf</li>
 *   <li>ArrayList contributorTo</li>
 * </ul>
 * </p>
 */
public class PersonMatcher extends TypeSafeMatcher<Person> {
    private final Map<String, Matcher<?>> matchers = new LinkedHashMap<>();
    private final List<String> expectedContent = new ArrayList<>();
    private final Person expected;

    /**
     * Define the matchers that will perform the actual tests
     */
    public PersonMatcher(Person expected) {
        this.expected = expected;

        if (expected.getId() != null) {
            matchers.put("id", IsEqual.equalTo(expected.getId()));
        } else {
            matchers.put("id", IsNull.nullValue());
        }
        if (expected.getTimestamp() != null) {
            matchers.put("timestamp", IsEqual.equalTo(ISO_INSTANT.format(expected.getTimestamp())));
        } else {
            matchers.put("timestamp", IsNull.nullValue());
        }
        if (expected.getName() != null) {
            matchers.put("name", IsEqual.equalTo(expected.getName()));
        } else {
            matchers.put("name", IsNull.nullValue());
        }
        if (expected.getEmail() != null) {
            matchers.put("email", IsEqual.equalTo(expected.getEmail()));
        } else {
            matchers.put("email", IsNull.nullValue());
        }
        if (expected.getUrl() != null) {
            matchers.put("url", IsEqual.equalTo(expected.getUrl()));
        } else {
            matchers.put("url", IsNull.nullValue());
        }

        expectedContent.add("id: " + expected.getId());
        if (expected.getTimestamp() != null) {
            expectedContent.add("timestamp: " + ISO_INSTANT.format(expected.getTimestamp()));
        } else {
            expectedContent.add("timestamp: null");
        }
        expectedContent.add("name: " + expected.getName());
        expectedContent.add("email: " + expected.getEmail());
        expectedContent.add("url: " + expected.getUrl());
    }

    /**
     * Describe the expected value
     */
    @Override
    public void describeTo(Description description) {
        description.appendValueList("Person: [ ", ", ", " ]", expectedContent);
    }

    /**
     * Describe difference between actual and expected values
     */
    @Override
    public void describeMismatchSafely(Person actual, Description description) {
        final List<String> actualContent = new ArrayList<>();

        if (!matchers.get("id").matches(actual.getId())) {
            actualContent.add("id: " + actual.getId());
        }
        if (actual.getTimestamp() != null) {
            if (!matchers.get("timestamp").matches(ISO_INSTANT.format(actual.getTimestamp()))) {
                actualContent.add("timestamp: " + ISO_INSTANT.format(actual.getTimestamp()));
            }
        } else if (expected.getTimestamp() != null) {
            actualContent.add("timestamp: null");
        }
        if (!matchers.get("name").matches(actual.getName())) {
            actualContent.add("name: " + actual.getName());
        }
        if (!matchers.get("email").matches(actual.getEmail())) {
            actualContent.add("email: " + actual.getEmail());
        }
        if (!matchers.get("url").matches(actual.getUrl())) {
            actualContent.add("url: " + actual.getUrl());
        }

        if (!actualContent.isEmpty()) {
            description.appendValueList("Person [ ", ", ", " ]", actualContent);
        }
    }

    /**
     * Determine the differences between the expected and actual values.
     */
    @Override
    protected boolean matchesSafely(Person actual) {
        if (!matchers.get("id").matches(actual.getId())) {
            return false;
        }
        if (actual.getTimestamp() != null) {
            if (!matchers.get("timestamp").matches(ISO_INSTANT.format(actual.getTimestamp()))) {
                return false;
            }
        } else if (expected.getTimestamp() != null) {
            return false;
        }
        if (!matchers.get("name").matches(actual.getName())) {
            return false;
        }
        if (!matchers.get("email").matches(actual.getEmail())) {
            return false;
        }
        if (!matchers.get("url").matches(actual.getUrl())) {
            return false;
        }

        return true;
    }

    /**
     * Static factory
     *
     * @param expected
     */
    public static PersonMatcher equalTo(Person expected) {
        return new PersonMatcher(expected);
    }

    /**
     * Static factory
     *
     * @param expected
     */
    public static PersonMatcher deepEqualTo(Person expected) {
        throw new AssertionError("unimplemented method");
    }
}

