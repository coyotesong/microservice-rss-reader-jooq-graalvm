/*
 * Copyright (c) 2023. Bear Giles <bgiles@coyotesong.com>.
 * All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.coyotesong.microservice.rss.model.matchers;

import com.coyotesong.microservice.rss.model.Image;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.TypeSafeMatcher;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.IsNull;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Hamcrest Matcher for Image objects
 * <p>
 * This file was autogenerated.
 * </p>
 */
public class ImageMatcher extends TypeSafeMatcher<Image> {
    private final Map<String, Matcher<?>> matchers = new LinkedHashMap<>();
    private final List<String> expectedContent = new ArrayList<>();
    private final Image expected;

    /**
     * Define the matchers that will perform the actual tests
     */
    public ImageMatcher(Image expected) {
        this.expected = expected;

        if (expected.getId() != null) {
            matchers.put("id", IsEqual.equalTo(expected.getId()));
        } else {
            matchers.put("id", IsNull.nullValue());
        }
        if (expected.getTitle() != null) {
            matchers.put("title", IsEqual.equalTo(expected.getTitle()));
        } else {
            matchers.put("title", IsNull.nullValue());
        }
        if (expected.getUrl() != null) {
            matchers.put("url", IsEqual.equalTo(expected.getUrl()));
        } else {
            matchers.put("url", IsNull.nullValue());
        }
        if (expected.getDescription() != null) {
            matchers.put("description", IsEqual.equalTo(expected.getDescription()));
        } else {
            matchers.put("description", IsNull.nullValue());
        }
        if (expected.getHeight() != null) {
            matchers.put("height", IsEqual.equalTo(expected.getHeight()));
        } else {
            matchers.put("height", IsNull.nullValue());
        }
        if (expected.getWidth() != null) {
            matchers.put("width", IsEqual.equalTo(expected.getWidth()));
        } else {
            matchers.put("width", IsNull.nullValue());
        }
        if (expected.getLink() != null) {
            matchers.put("link", IsEqual.equalTo(expected.getLink()));
        } else {
            matchers.put("link", IsNull.nullValue());
        }

        expectedContent.add("id: " + expected.getId());
        expectedContent.add("title: " + expected.getTitle());
        expectedContent.add("url: " + expected.getUrl());
        expectedContent.add("description: " + expected.getDescription());
        expectedContent.add("height: " + expected.getHeight());
        expectedContent.add("width: " + expected.getWidth());
        expectedContent.add("link: " + expected.getLink());
    }

    /**
     * Describe the expected value
     */
    @Override
    public void describeTo(Description description) {
        description.appendValueList("Image: [ ", ", ", " ]", expectedContent);
    }

    /**
     * Describe difference between actual and expected values
     */
    @Override
    public void describeMismatchSafely(Image actual, Description description) {
        final List<String> actualContent = new ArrayList<>();

        if (!matchers.get("id").matches(actual.getId())) {
            actualContent.add("id: " + actual.getId());
        }
        if (!matchers.get("title").matches(actual.getTitle())) {
            actualContent.add("title: " + actual.getTitle());
        }
        if (!matchers.get("url").matches(actual.getUrl())) {
            actualContent.add("url: " + actual.getUrl());
        }
        if (!matchers.get("description").matches(actual.getDescription())) {
            actualContent.add("description: " + actual.getDescription());
        }
        if (!matchers.get("height").matches(actual.getHeight())) {
            actualContent.add("height: " + actual.getHeight());
        }
        if (!matchers.get("width").matches(actual.getWidth())) {
            actualContent.add("width: " + actual.getWidth());
        }
        if (!matchers.get("link").matches(actual.getLink())) {
            actualContent.add("link: " + actual.getLink());
        }

        if (!actualContent.isEmpty()) {
            description.appendValueList("Image [ ", ", ", " ]", actualContent);
        }
    }

    /**
     * Determine the differences between the expected and actual values.
     */
    @Override
    protected boolean matchesSafely(Image actual) {
        if (!matchers.get("id").matches(actual.getId())) {
            return false;
        }
        if (!matchers.get("title").matches(actual.getTitle())) {
            return false;
        }
        if (!matchers.get("url").matches(actual.getUrl())) {
            return false;
        }
        if (!matchers.get("description").matches(actual.getDescription())) {
            return false;
        }
        if (!matchers.get("height").matches(actual.getHeight())) {
            return false;
        }
        if (!matchers.get("width").matches(actual.getWidth())) {
            return false;
        }
        if (!matchers.get("link").matches(actual.getLink())) {
            return false;
        }

        return true;
    }

    /**
     * Static factory
     *
     * @param expected
     */
    public static ImageMatcher equalTo(Image expected) {
        return new ImageMatcher(expected);
    }

    /**
     * Static factory
     *
     * @param expected
     */
    public static ImageMatcher deepEqualTo(Image expected) {
        throw new AssertionError("unimplemented method");
    }
}

