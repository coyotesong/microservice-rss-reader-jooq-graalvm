/*
 * Copyright (c) 2023. Bear Giles <bgiles@coyotesong.com>.
 * All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.coyotesong.microservice.rss.model.matchers;

import com.coyotesong.microservice.rss.model.Link;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.TypeSafeMatcher;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.IsNull;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Hamcrest Matcher for Link objects
 * <p>
 * This file was autogenerated.
 * </p>
 */
public class LinkMatcher extends TypeSafeMatcher<Link> {
    private final Map<String, Matcher<?>> matchers = new LinkedHashMap<>();
    private final List<String> expectedContent = new ArrayList<>();
    private final Link expected;

    /**
     * Define the matchers that will perform the actual tests
     */
    public LinkMatcher(Link expected) {
        this.expected = expected;

        if (expected.getId() != null) {
            matchers.put("id", IsEqual.equalTo(expected.getId()));
        } else {
            matchers.put("id", IsNull.nullValue());
        }
        if (expected.getEntryId() != null) {
            matchers.put("entryId", IsEqual.equalTo(expected.getEntryId()));
        } else {
            matchers.put("entryId", IsNull.nullValue());
        }
        matchers.put("position", IsEqual.equalTo(expected.getPosition()));
        if (expected.getTitle() != null) {
            matchers.put("title", IsEqual.equalTo(expected.getTitle()));
        } else {
            matchers.put("title", IsNull.nullValue());
        }
        if (expected.getType() != null) {
            matchers.put("type", IsEqual.equalTo(expected.getType()));
        } else {
            matchers.put("type", IsNull.nullValue());
        }
        if (expected.getHref() != null) {
            matchers.put("href", IsEqual.equalTo(expected.getHref()));
        } else {
            matchers.put("href", IsNull.nullValue());
        }
        if (expected.getHrefLang() != null) {
            matchers.put("hrefLang", IsEqual.equalTo(expected.getHrefLang()));
        } else {
            matchers.put("hrefLang", IsNull.nullValue());
        }
        if (expected.getLength() != null) {
            matchers.put("length", IsEqual.equalTo(expected.getLength()));
        } else {
            matchers.put("length", IsNull.nullValue());
        }
        if (expected.getRel() != null) {
            matchers.put("rel", IsEqual.equalTo(expected.getRel()));
        } else {
            matchers.put("rel", IsNull.nullValue());
        }

        expectedContent.add("id: " + expected.getId());
        expectedContent.add("entryId: " + expected.getEntryId());
        expectedContent.add("position: " + expected.getPosition());
        expectedContent.add("title: " + expected.getTitle());
        expectedContent.add("type: " + expected.getType());
        expectedContent.add("href: " + expected.getHref());
        expectedContent.add("hrefLang: " + expected.getHrefLang());
        expectedContent.add("length: " + expected.getLength());
        expectedContent.add("rel: " + expected.getRel());
    }

    /**
     * Describe the expected value
     */
    @Override
    public void describeTo(Description description) {
        description.appendValueList("Link: [ ", ", ", " ]", expectedContent);
    }

    /**
     * Describe difference between actual and expected values
     */
    @Override
    public void describeMismatchSafely(Link actual, Description description) {
        final List<String> actualContent = new ArrayList<>();

        if (!matchers.get("id").matches(actual.getId())) {
            actualContent.add("id: " + actual.getId());
        }
        if (!matchers.get("entryId").matches(actual.getEntryId())) {
            actualContent.add("entryId: " + actual.getEntryId());
        }
        if (!matchers.get("position").matches(actual.getPosition())) {
            actualContent.add("position: " + actual.getPosition());
        }
        if (!matchers.get("title").matches(actual.getTitle())) {
            actualContent.add("title: " + actual.getTitle());
        }
        if (!matchers.get("type").matches(actual.getType())) {
            actualContent.add("type: " + actual.getType());
        }
        if (!matchers.get("href").matches(actual.getHref())) {
            actualContent.add("href: " + actual.getHref());
        }
        if (!matchers.get("hrefLang").matches(actual.getHrefLang())) {
            actualContent.add("hrefLang: " + actual.getHrefLang());
        }
        if (!matchers.get("length").matches(actual.getLength())) {
            actualContent.add("length: " + actual.getLength());
        }
        if (!matchers.get("rel").matches(actual.getRel())) {
            actualContent.add("rel: " + actual.getRel());
        }

        if (!actualContent.isEmpty()) {
            description.appendValueList("Link [ ", ", ", " ]", actualContent);
        }
    }

    /**
     * Determine the differences between the expected and actual values.
     */
    @Override
    protected boolean matchesSafely(Link actual) {
        if (!matchers.get("id").matches(actual.getId())) {
            return false;
        }
        if (!matchers.get("entryId").matches(actual.getEntryId())) {
            return false;
        }
        if (!matchers.get("position").matches(actual.getPosition())) {
            return false;
        }
        if (!matchers.get("title").matches(actual.getTitle())) {
            return false;
        }
        if (!matchers.get("type").matches(actual.getType())) {
            return false;
        }
        if (!matchers.get("href").matches(actual.getHref())) {
            return false;
        }
        if (!matchers.get("hrefLang").matches(actual.getHrefLang())) {
            return false;
        }
        if (!matchers.get("length").matches(actual.getLength())) {
            return false;
        }
        if (!matchers.get("rel").matches(actual.getRel())) {
            return false;
        }

        return true;
    }

    /**
     * Static factory
     *
     * @param expected
     */
    public static LinkMatcher equalTo(Link expected) {
        return new LinkMatcher(expected);
    }

    /**
     * Static factory
     *
     * @param expected
     */
    public static LinkMatcher deepEqualTo(Link expected) {
        throw new AssertionError("unimplemented method");
    }
}

