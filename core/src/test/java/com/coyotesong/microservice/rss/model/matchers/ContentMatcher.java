/*
 * Copyright (c) 2023. Bear Giles <bgiles@coyotesong.com>.
 * All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.coyotesong.microservice.rss.model.matchers;

import com.coyotesong.microservice.rss.model.Content;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.TypeSafeMatcher;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.IsNull;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Hamcrest Matcher for Content objects
 * <p>
 * This file was autogenerated.
 * </p><p>
 * Note: it can not (yet) handle these columns:
 * <ul>
 *   <li>Entry entry</li>
 * </ul>
 * </p>
 */
public class ContentMatcher extends TypeSafeMatcher<Content> {
    private final Map<String, Matcher<?>> matchers = new LinkedHashMap<>();
    private final List<String> expectedContent = new ArrayList<>();
    private final Content expected;

    /**
     * Define the matchers that will perform the actual tests
     */
    public ContentMatcher(Content expected) {
        this.expected = expected;

        if (expected.getMode() != null) {
            matchers.put("mode", IsEqual.equalTo(expected.getMode()));
        } else {
            matchers.put("mode", IsNull.nullValue());
        }
        if (expected.getType() != null) {
            matchers.put("type", IsEqual.equalTo(expected.getType()));
        } else {
            matchers.put("type", IsNull.nullValue());
        }
        if (expected.getValue() != null) {
            matchers.put("value", IsEqual.equalTo(expected.getValue()));
        } else {
            matchers.put("value", IsNull.nullValue());
        }

        expectedContent.add("mode: " + expected.getMode());
        expectedContent.add("type: " + expected.getType());
        expectedContent.add("value: " + expected.getValue());
    }

    /**
     * Describe the expected value
     */
    @Override
    public void describeTo(Description description) {
        description.appendValueList("Content: [ ", ", ", " ]", expectedContent);
    }

    /**
     * Describe difference between actual and expected values
     */
    @Override
    public void describeMismatchSafely(Content actual, Description description) {
        final List<String> actualContent = new ArrayList<>();

        if (!matchers.get("mode").matches(actual.getMode())) {
            actualContent.add("mode: " + actual.getMode());
        }
        if (!matchers.get("type").matches(actual.getType())) {
            actualContent.add("type: " + actual.getType());
        }
        if (!matchers.get("value").matches(actual.getValue())) {
            actualContent.add("value: " + actual.getValue());
        }

        if (!actualContent.isEmpty()) {
            description.appendValueList("Content [ ", ", ", " ]", actualContent);
        }
    }

    /**
     * Determine the differences between the expected and actual values.
     */
    @Override
    protected boolean matchesSafely(Content actual) {
        if (!matchers.get("mode").matches(actual.getMode())) {
            return false;
        }
        if (!matchers.get("type").matches(actual.getType())) {
            return false;
        }
        if (!matchers.get("value").matches(actual.getValue())) {
            return false;
        }

        return true;
    }

    /**
     * Static factory
     *
     * @param expected
     */
    public static ContentMatcher equalTo(Content expected) {
        return new ContentMatcher(expected);
    }

    /**
     * Static factory
     *
     * @param expected
     */
    public static ContentMatcher deepEqualTo(Content expected) {
        throw new AssertionError("unimplemented method");
    }
}

