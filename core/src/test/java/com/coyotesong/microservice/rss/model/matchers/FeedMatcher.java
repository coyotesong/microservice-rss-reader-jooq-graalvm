/*
 * Copyright (c) 2023. Bear Giles <bgiles@coyotesong.com>.
 * All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.coyotesong.microservice.rss.model.matchers;

import com.coyotesong.microservice.rss.model.Feed;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.TypeSafeMatcher;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.IsNull;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import static java.time.format.DateTimeFormatter.ISO_INSTANT;

/**
 * Hamcrest Matcher for Feed objects
 * <p>
 * This file was autogenerated.
 * </p><p>
 * Note: it can not (yet) handle these columns:
 * <ul>
 *   <li>Image image</li>
 *   <li>Image icon</li>
 *   <li>ArrayList authors</li>
 *   <li>ArrayList categories</li>
 *   <li>ArrayList contributors</li>
 *   <li>ArrayList entries</li>
 *   <li>ArrayList links</li>
 *   <li>ArrayList headers</li>
 * </ul>
 * </p>
 */
public class FeedMatcher extends TypeSafeMatcher<Feed> {
    private final Map<String, Matcher<?>> matchers = new LinkedHashMap<>();
    private final List<String> expectedContent = new ArrayList<>();
    private final Feed expected;

    /**
     * Define the matchers that will perform the actual tests
     */
    public FeedMatcher(Feed expected) {
        this.expected = expected;

        if (expected.getId() != null) {
            matchers.put("id", IsEqual.equalTo(expected.getId()));
        } else {
            matchers.put("id", IsNull.nullValue());
        }
        if (expected.getTimestamp() != null) {
            matchers.put("timestamp", IsEqual.equalTo(ISO_INSTANT.format(expected.getTimestamp())));
        } else {
            matchers.put("timestamp", IsNull.nullValue());
        }
        if (expected.getUrl() != null) {
            matchers.put("url", IsEqual.equalTo(expected.getUrl()));
        } else {
            matchers.put("url", IsNull.nullValue());
        }
        if (expected.getOriginalUrl() != null) {
            matchers.put("originalUrl", IsEqual.equalTo(expected.getOriginalUrl()));
        } else {
            matchers.put("originalUrl", IsNull.nullValue());
        }
        matchers.put("isValid", IsEqual.equalTo(expected.isValid()));
        matchers.put("isLive", IsEqual.equalTo(expected.isLive()));
        if (expected.getTitle() != null) {
            matchers.put("title", IsEqual.equalTo(expected.getTitle()));
        } else {
            matchers.put("title", IsNull.nullValue());
        }
        if (expected.getXmlProtocol() != null) {
            matchers.put("xmlProtocol", IsEqual.equalTo(expected.getXmlProtocol()));
        } else {
            matchers.put("xmlProtocol", IsNull.nullValue());
        }
        if (expected.getXmlLink() != null) {
            matchers.put("xmlLink", IsEqual.equalTo(expected.getXmlLink()));
        } else {
            matchers.put("xmlLink", IsNull.nullValue());
        }
        if (expected.getFeedType() != null) {
            matchers.put("feedType", IsEqual.equalTo(expected.getFeedType()));
        } else {
            matchers.put("feedType", IsNull.nullValue());
        }
        if (expected.getCopyright() != null) {
            matchers.put("copyright", IsEqual.equalTo(expected.getCopyright()));
        } else {
            matchers.put("copyright", IsNull.nullValue());
        }
        if (expected.getEncoding() != null) {
            matchers.put("encoding", IsEqual.equalTo(expected.getEncoding()));
        } else {
            matchers.put("encoding", IsNull.nullValue());
        }
        if (expected.getLanguage() != null) {
            matchers.put("language", IsEqual.equalTo(expected.getLanguage()));
        } else {
            matchers.put("language", IsNull.nullValue());
        }
        if (expected.getManagingEditor() != null) {
            matchers.put("managingEditor", IsEqual.equalTo(expected.getManagingEditor()));
        } else {
            matchers.put("managingEditor", IsNull.nullValue());
        }
        if (expected.getWebMaster() != null) {
            matchers.put("webMaster", IsEqual.equalTo(expected.getWebMaster()));
        } else {
            matchers.put("webMaster", IsNull.nullValue());
        }
        if (expected.getAuthor() != null) {
            matchers.put("author", IsEqual.equalTo(expected.getAuthor()));
        } else {
            matchers.put("author", IsNull.nullValue());
        }
        matchers.put("requiresAuthentication", IsEqual.equalTo(expected.requiresAuthentication()));
        if (expected.getError() != null) {
            matchers.put("error", IsEqual.equalTo(expected.getError()));
        } else {
            matchers.put("error", IsNull.nullValue());
        }
        if (expected.getPublishedDate() != null) {
            matchers.put("publishedDate", IsEqual.equalTo(ISO_INSTANT.format(expected.getPublishedDate())));
        } else {
            matchers.put("publishedDate", IsNull.nullValue());
        }
        matchers.put("authorCount", IsEqual.equalTo(expected.getAuthorCount()));
        matchers.put("linkCount", IsEqual.equalTo(expected.getLinkCount()));
        if (expected.getHtmlUrl() != null) {
            matchers.put("htmlUrl", IsEqual.equalTo(expected.getHtmlUrl()));
        } else {
            matchers.put("htmlUrl", IsNull.nullValue());
        }

        expectedContent.add("id: " + expected.getId());
        if (expected.getTimestamp() != null) {
            expectedContent.add("timestamp: " + ISO_INSTANT.format(expected.getTimestamp()));
        } else {
            expectedContent.add("timestamp: null");
        }
        expectedContent.add("url: " + expected.getUrl());
        expectedContent.add("originalUrl: " + expected.getOriginalUrl());
        expectedContent.add("isValid: " + expected.isValid());
        expectedContent.add("isLive: " + expected.isLive());
        expectedContent.add("title: " + expected.getTitle());
        expectedContent.add("xmlProtocol: " + expected.getXmlProtocol());
        expectedContent.add("xmlLink: " + expected.getXmlLink());
        expectedContent.add("feedType: " + expected.getFeedType());
        expectedContent.add("copyright: " + expected.getCopyright());
        expectedContent.add("encoding: " + expected.getEncoding());
        expectedContent.add("language: " + expected.getLanguage());
        expectedContent.add("managingEditor: " + expected.getManagingEditor());
        expectedContent.add("webMaster: " + expected.getWebMaster());
        expectedContent.add("author: " + expected.getAuthor());
        expectedContent.add("requiresAuthentication: " + expected.requiresAuthentication());
        expectedContent.add("error: " + expected.getError());
        if (expected.getPublishedDate() != null) {
            expectedContent.add("publishedDate: " + ISO_INSTANT.format(expected.getPublishedDate()));
        } else {
            expectedContent.add("publishedDate: null");
        }
        expectedContent.add("body: " + expected.getBody());
        expectedContent.add("authorCount: " + expected.getAuthorCount());
        expectedContent.add("linkCount: " + expected.getLinkCount());
        expectedContent.add("htmlUrl: " + expected.getHtmlUrl());
    }

    /**
     * Describe the expected value
     */
    @Override
    public void describeTo(Description description) {
        description.appendValueList("Feed: [ ", ", ", " ]", expectedContent);
    }

    /**
     * Describe difference between actual and expected values
     */
    @Override
    public void describeMismatchSafely(Feed actual, Description description) {
        final List<String> actualContent = new ArrayList<>();

        if (!matchers.get("id").matches(actual.getId())) {
            actualContent.add("id: " + actual.getId());
        }
        if (actual.getTimestamp() != null) {
            if (!matchers.get("timestamp").matches(ISO_INSTANT.format(actual.getTimestamp()))) {
                actualContent.add("timestamp: " + ISO_INSTANT.format(actual.getTimestamp()));
            }
        } else if (expected.getTimestamp() != null) {
            actualContent.add("timestamp: null");
        }
        if (!matchers.get("url").matches(actual.getUrl())) {
            actualContent.add("url: " + actual.getUrl());
        }
        if (!matchers.get("originalUrl").matches(actual.getOriginalUrl())) {
            actualContent.add("originalUrl: " + actual.getOriginalUrl());
        }
        if (!matchers.get("isValid").matches(actual.isValid())) {
            actualContent.add("isValid: " + actual.isValid());
        }
        if (!matchers.get("isLive").matches(actual.isLive())) {
            actualContent.add("isLive: " + actual.isLive());
        }
        if (!matchers.get("title").matches(actual.getTitle())) {
            actualContent.add("title: " + actual.getTitle());
        }
        if (!matchers.get("xmlProtocol").matches(actual.getXmlProtocol())) {
            actualContent.add("xmlProtocol: " + actual.getXmlProtocol());
        }
        if (!matchers.get("xmlLink").matches(actual.getXmlLink())) {
            actualContent.add("xmlLink: " + actual.getXmlLink());
        }
        if (!matchers.get("feedType").matches(actual.getFeedType())) {
            actualContent.add("feedType: " + actual.getFeedType());
        }
        if (!matchers.get("copyright").matches(actual.getCopyright())) {
            actualContent.add("copyright: " + actual.getCopyright());
        }
        if (!matchers.get("encoding").matches(actual.getEncoding())) {
            actualContent.add("encoding: " + actual.getEncoding());
        }
        if (!matchers.get("language").matches(actual.getLanguage())) {
            actualContent.add("language: " + actual.getLanguage());
        }
        if (!matchers.get("managingEditor").matches(actual.getManagingEditor())) {
            actualContent.add("managingEditor: " + actual.getManagingEditor());
        }
        if (!matchers.get("webMaster").matches(actual.getWebMaster())) {
            actualContent.add("webMaster: " + actual.getWebMaster());
        }
        if (!matchers.get("author").matches(actual.getAuthor())) {
            actualContent.add("author: " + actual.getAuthor());
        }
        if (!matchers.get("requiresAuthentication").matches(actual.requiresAuthentication())) {
            actualContent.add("requiresAuthentication: " + actual.requiresAuthentication());
        }
        if (!matchers.get("error").matches(actual.getError())) {
            actualContent.add("error: " + actual.getError());
        }
        if (actual.getPublishedDate() != null) {
            if (!matchers.get("publishedDate").matches(ISO_INSTANT.format(actual.getPublishedDate()))) {
                actualContent.add("publishedDate: " + ISO_INSTANT.format(actual.getPublishedDate()));
            }
        } else if (expected.getPublishedDate() != null) {
            actualContent.add("publishedDate: null");
        }
        if (!matchers.get("body").matches(actual.getBody())) {
            actualContent.add("body: " + actual.getBody());
        }
        if (!matchers.get("authorCount").matches(actual.getAuthorCount())) {
            actualContent.add("authorCount: " + actual.getAuthorCount());
        }
        if (!matchers.get("linkCount").matches(actual.getLinkCount())) {
            actualContent.add("linkCount: " + actual.getLinkCount());
        }
        if (!matchers.get("htmlUrl").matches(actual.getHtmlUrl())) {
            actualContent.add("htmlUrl: " + actual.getHtmlUrl());
        }

        if (!actualContent.isEmpty()) {
            description.appendValueList("Feed [ ", ", ", " ]", actualContent);
        }
    }

    /**
     * Determine the differences between the expected and actual values.
     */
    @Override
    protected boolean matchesSafely(Feed actual) {
        if (!matchers.get("id").matches(actual.getId())) {
            return false;
        }
        if (actual.getTimestamp() != null) {
            if (!matchers.get("timestamp").matches(ISO_INSTANT.format(actual.getTimestamp()))) {
                return false;
            }
        } else if (expected.getTimestamp() != null) {
            return false;
        }
        if (!matchers.get("url").matches(actual.getUrl())) {
            return false;
        }
        if (!matchers.get("originalUrl").matches(actual.getOriginalUrl())) {
            return false;
        }
        if (!matchers.get("isValid").matches(actual.isValid())) {
            return false;
        }
        if (!matchers.get("isLive").matches(actual.isLive())) {
            return false;
        }
        if (!matchers.get("title").matches(actual.getTitle())) {
            return false;
        }
        if (!matchers.get("xmlProtocol").matches(actual.getXmlProtocol())) {
            return false;
        }
        if (!matchers.get("xmlLink").matches(actual.getXmlLink())) {
            return false;
        }
        if (!matchers.get("feedType").matches(actual.getFeedType())) {
            return false;
        }
        if (!matchers.get("copyright").matches(actual.getCopyright())) {
            return false;
        }
        if (!matchers.get("encoding").matches(actual.getEncoding())) {
            return false;
        }
        if (!matchers.get("language").matches(actual.getLanguage())) {
            return false;
        }
        if (!matchers.get("managingEditor").matches(actual.getManagingEditor())) {
            return false;
        }
        if (!matchers.get("webMaster").matches(actual.getWebMaster())) {
            return false;
        }
        if (!matchers.get("author").matches(actual.getAuthor())) {
            return false;
        }
        if (!matchers.get("requiresAuthentication").matches(actual.requiresAuthentication())) {
            return false;
        }
        if (!matchers.get("error").matches(actual.getError())) {
            return false;
        }
        if (actual.getPublishedDate() != null) {
            if (!matchers.get("publishedDate").matches(ISO_INSTANT.format(actual.getPublishedDate()))) {
                return false;
            }
        } else if (expected.getPublishedDate() != null) {
            return false;
        }
        if (!matchers.get("body").matches(actual.getBody())) {
            return false;
        }
        if (!matchers.get("authorCount").matches(actual.getAuthorCount())) {
            return false;
        }
        if (!matchers.get("linkCount").matches(actual.getLinkCount())) {
            return false;
        }
        if (!matchers.get("htmlUrl").matches(actual.getHtmlUrl())) {
            return false;
        }

        return true;
    }

    /**
     * Static factory
     *
     * @param expected
     */
    public static FeedMatcher equalTo(Feed expected) {
        return new FeedMatcher(expected);
    }

    /**
     * Static factory
     *
     * @param expected
     */
    public static FeedMatcher deepEqualTo(Feed expected) {
        throw new AssertionError("unimplemented method");
    }
}

