/*
 * Copyright (c) 2023. Bear Giles <bgiles@coyotesong.com>.
 * All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.coyotesong.microservice.rss.model.matchers;

import com.coyotesong.microservice.rss.model.FeedAuthentication;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.TypeSafeMatcher;
import org.hamcrest.core.IsEqual;
import org.hamcrest.core.IsNull;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import static java.time.format.DateTimeFormatter.ISO_INSTANT;

/**
 * Hamcrest Matcher for FeedAuthentication objects
 * <p>
 * This file was autogenerated.
 * </p>
 */
public class FeedAuthenticationMatcher extends TypeSafeMatcher<FeedAuthentication> {
    private final Map<String, Matcher<?>> matchers = new LinkedHashMap<>();
    private final List<String> expectedContent = new ArrayList<>();
    private final FeedAuthentication expected;

    /**
     * Define the matchers that will perform the actual tests
     */
    public FeedAuthenticationMatcher(FeedAuthentication expected) {
        this.expected = expected;

        if (expected.getId() != null) {
            matchers.put("feedId", IsEqual.equalTo(expected.getId()));
        } else {
            matchers.put("feedId", IsNull.nullValue());
        }
        if (expected.getTimestamp() != null) {
            matchers.put("timestamp", IsEqual.equalTo(ISO_INSTANT.format(expected.getTimestamp())));
        } else {
            matchers.put("timestamp", IsNull.nullValue());
        }
        if (expected.getAuthenticationUrl() != null) {
            matchers.put("authenticationUrl", IsEqual.equalTo(expected.getAuthenticationUrl()));
        } else {
            matchers.put("authenticationUrl", IsNull.nullValue());
        }
        if (expected.getUsername() != null) {
            matchers.put("username", IsEqual.equalTo(expected.getUsername()));
        } else {
            matchers.put("username", IsNull.nullValue());
        }
        if (expected.getPassword() != null) {
            matchers.put("password", IsEqual.equalTo(expected.getPassword()));
        } else {
            matchers.put("password", IsNull.nullValue());
        }

        expectedContent.add("feedId: " + expected.getId());
        if (expected.getTimestamp() != null) {
            expectedContent.add("timestamp: " + ISO_INSTANT.format(expected.getTimestamp()));
        } else {
            expectedContent.add("timestamp: null");
        }
        expectedContent.add("authenticationUrl: " + expected.getAuthenticationUrl());
        expectedContent.add("username: " + expected.getUsername());
        expectedContent.add("password: " + expected.getPassword());
    }

    /**
     * Describe the expected value
     */
    @Override
    public void describeTo(Description description) {
        description.appendValueList("FeedAuthentication: [ ", ", ", " ]", expectedContent);
    }

    /**
     * Describe difference between actual and expected values
     */
    @Override
    public void describeMismatchSafely(FeedAuthentication actual, Description description) {
        final List<String> actualContent = new ArrayList<>();

        if (!matchers.get("feedId").matches(actual.getId())) {
            actualContent.add("feedId: " + actual.getId());
        }
        if (actual.getTimestamp() != null) {
            if (!matchers.get("timestamp").matches(ISO_INSTANT.format(actual.getTimestamp()))) {
                actualContent.add("timestamp: " + ISO_INSTANT.format(actual.getTimestamp()));
            }
        } else if (expected.getTimestamp() != null) {
            actualContent.add("timestamp: null");
        }
        if (!matchers.get("authenticationUrl").matches(actual.getAuthenticationUrl())) {
            actualContent.add("authenticationUrl: " + actual.getAuthenticationUrl());
        }
        if (!matchers.get("username").matches(actual.getUsername())) {
            actualContent.add("username: " + actual.getUsername());
        }
        if (!matchers.get("password").matches(actual.getPassword())) {
            actualContent.add("password: " + actual.getPassword());
        }

        if (!actualContent.isEmpty()) {
            description.appendValueList("FeedAuthentication [ ", ", ", " ]", actualContent);
        }
    }

    /**
     * Determine the differences between the expected and actual values.
     */
    @Override
    protected boolean matchesSafely(FeedAuthentication actual) {
        if (!matchers.get("feedId").matches(actual.getId())) {
            return false;
        }
        if (actual.getTimestamp() != null) {
            if (!matchers.get("timestamp").matches(ISO_INSTANT.format(actual.getTimestamp()))) {
                return false;
            }
        } else if (expected.getTimestamp() != null) {
            return false;
        }
        if (!matchers.get("authenticationUrl").matches(actual.getAuthenticationUrl())) {
            return false;
        }
        if (!matchers.get("username").matches(actual.getUsername())) {
            return false;
        }
        if (!matchers.get("password").matches(actual.getPassword())) {
            return false;
        }

        return true;
    }

    /**
     * Static factory
     *
     * @param expected
     */
    public static FeedAuthenticationMatcher equalTo(FeedAuthentication expected) {
        return new FeedAuthenticationMatcher(expected);
    }

    /**
     * Static factory
     *
     * @param expected
     */
    public static FeedAuthenticationMatcher deepEqualTo(FeedAuthentication expected) {
        throw new AssertionError("unimplemented method");
    }
}

